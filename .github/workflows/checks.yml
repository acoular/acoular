name: Linting and Formatting

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    branches: [ '*' ] # allow manual trigger for all branches
  schedule:
    - cron: "00 18 * * *"
    
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  linting:
    if: ${{ github.event_name !='schedule'}}
    runs-on: ubuntu-latest
    steps:
      - name: Check out a copy of the repository
        uses: actions/checkout@v4
      - name: Set up hatch
        uses: ./.github/actions/setup-hatch
      - name: Run ruff
        run: hatch -v fmt --check

  validate-cff:
    if: ${{ github.event_name !='schedule'}}
    runs-on: ubuntu-latest
    steps:
      - name: Check out a copy of the repository
        uses: actions/checkout@v4
      - name: Check whether the citation metadata from CITATION.cff is valid
        uses: citation-file-format/cffconvert-github-action@2.0.0
        with:
          args: --validate

  link-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: check links
        id: lychee
        uses: lycheeverse/lychee-action@v1
        with:
          # Check all markdown, html and reStructuredText files in repo (default)
          args: --base . --verbose --no-progress './**/*.md' './**/*.html' './**/*.rst'        
      - name: Create Issue From File
        if: ${{ env.lychee_exit_code != 0 && github.event_name == 'schedule' }}
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Link Checker Report
          content-filepath: ./lychee/out.md
          labels: report, automated issue  

  alls-green:
    name: Checks green?
    if: always()
    needs:
      - linting
      - validate-cff
      - markdown-link-check
    runs-on: ubuntu-latest
    steps:
      - id: workaround
        uses: actions/github-script@v7
        with:
          # Workaround for https://github.com/re-actors/alls-green/issues/29
          # we strip outputs from the needs object to avoid nested JSON
          result-encoding: string
          script: |
            return JSON.stringify(Object.fromEntries(Object.entries(${{ toJSON(needs) }})
              .map(([name, { result }]) => [name, { result, outputs: {} }])));
      - name: All checks passed?
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ steps.workaround.outputs.result }}
