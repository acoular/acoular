name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    branches: [ "*" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10','3.11','3.12', '3.13']
    steps:
      - name: Check out a copy of the repository
        uses: actions/checkout@v5
      - name: Set up uv
        uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up PortAudio
        uses: ./.github/actions/setup-portaudio
        with:
          os: ${{ matrix.os }}
      - name: Check import
        run: uv run --frozen python -c "import acoular"
      - name: Check demo
        run: uv run --frozen python -c "import acoular; acoular.demo.acoular_demo.run()"
      - name: Run tests
        run: uv run --frozen --extra tests python -m pytest
      - name: Run doctests
        run: uv run --frozen --extra tests python -m pytest --doctest-modules acoular

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Check out a copy of the repository
        uses: actions/checkout@v5
      - name: Set up uv
        uses: astral-sh/setup-uv@v7
      - name: Set up PortAudio
        uses: ./.github/actions/setup-portaudio
      - name: Generate coverage report
        run: |
          uv run --frozen --extra tests python -m pytest --cov=acoular
          uv run --frozen --extra tests python -m pytest --cov=acoular --cov-append --doctest-modules acoular
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: upload coverage HTML report
          path: htmlcov


  alls-green:
    name: Tests green?
    if: always()
    needs:
      - tests
      - coverage
    runs-on: ubuntu-latest
    steps:
      - id: workaround
        uses: actions/github-script@v7
        with:
          # Workaround for https://github.com/re-actors/alls-green/issues/29
          # we strip outputs from the needs object to avoid nested JSON
          result-encoding: string
          script: |
            return JSON.stringify(Object.fromEntries(Object.entries(${{ toJSON(needs) }})
              .map(([name, { result }]) => [name, { result, outputs: {} }])));
      - name: All checks passed?
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ steps.workaround.outputs.result }}
